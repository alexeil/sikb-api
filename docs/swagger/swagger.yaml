openapi: 3.0.0
info:
  title: SIKB-API
  description: |+

  contact:
    name: Fédération Kin-ball France
    url: 'http://kin-ball.fr'
    email: fkbf@kin-ball.fr
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
  version: v1

servers:
  - url: http://ec2-35-180-42-251.eu-west-3.compute.amazonaws.com:8080/sikb/api/v1
    description: AWS URL
  - url: http://localhost:8080/sikb/api/v1
    description: Local URL

security:
  - basicAuth: []

tags:
  - name: users
    description: accounts to log into the system
  - name: identifications
    description: APIs related to user connection
  - name: clubs
    description: APIs for Clubs management
  - name: affiliations
    description: APIs for affiliations management
  - name: teams
    description: APIs for teams management
  - name: persons
    description: APIs for persons management (a Person can be a Player, Referee etc.)
  - name: licences
    description: APIs for persons' licences management
  - name: configurations
    description: APIs to manage application configuration

paths:
  '/users':
    get:
      summary: Find all users
      description: 'Require USER_READ right'
      operationId: findUsers
      parameters:
        - $ref: '#/components/parameters/access_token'
      responses:
        200:
          description: find all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - users
    post:
      summary: Create a user
      description: 'Require USER_CREATE right'
      operationId: createUser
      parameters:
        - $ref: '#/components/parameters/access_token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - users
  '/users/{userId}':
    get:
      summary: get a user
      description: 'Require USER_READ right'
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          description: get back a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - users
    put:
      summary: Update a user
      description: 'Require USER_UPDATE right'
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userForUpdate'
        required:
          true
        description: body
      responses:
        201:
          description: Newly updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - users
    delete:
      summary: Delete a user
      description: 'Require USER_DELETE right'
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/userId'
      responses:
        204:
          description: The user is deleted
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - users
  '/users/login':
    post:
      summary: Log in a user
      description: ''
      operationId: userLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentials'
        required:
          true
        description: body
      responses:
        201:
          description: a new access token is created. This token will be send in every further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - identifications
  '/users/logout':
    get:
      summary: Log out a user (Revoke access Token)
      description: ''
      operationId: userLogout
      parameters:
        - $ref: '#/components/parameters/access_token'
      responses:
        204:
          description: Access token is revoked and user logged out
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - identifications
  '/users/reset':
    post:
      summary: Ask to reset a password
      description: ''
      operationId: userReset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reset'
        required:
          true
        description: body
      responses:
        204:
          description: A mail will be send allowing user to reset his password
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - identifications
  '/users/updatePassword':
    post:
      summary: Update the user password
      description: 'You can update either being log (access token is required) or unlog but you will need the resetToken in the mail sent by the reset password API'
      operationId: userUpdatePassword
      parameters:
        - name: "access_token"
          required: false
          schema:
            type: string
          in: header
          description: "Once the user is logged, the user receive an access token and have to send it for each further requests"
        - $ref: '#/components/parameters/resetToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePassword'
        required:
          true
        description: body
      responses:
        204:
          description: The password was updated
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - identifications
  '/users/confirm':
    post:
      summary: Confirm user email
      description: 'A mail was sent to the user email address with a link to confirm his email and set his password'
      operationId: userConfirm
      parameters:
        - $ref: '#/components/parameters/confirmToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/confirmPassword'
        required:
          true
        description: body
      responses:
        204:
          description: A mail was sent allowing to reset the password
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - identifications
  '/clubs':
    get:
      summary: Find all club
      description: 'Require CLUB_READ right'
      operationId: findClubs
      parameters:
        - $ref: '#/components/parameters/access_token'
      responses:
        200:
          description: find all clubs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/club'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - clubs
    post:
      summary: Create a club
      description: 'Require CLUB_CREATE right'
      operationId: createClub
      parameters:
        - $ref: '#/components/parameters/access_token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clubForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created club
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/club'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - clubs
  '/clubs/{clubId}':
    get:
      summary: get a club
      description: 'Require CLUB_READ right'
      operationId: getClubById
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
      responses:
        200:
          description: get back a club
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/club'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - clubs
    put:
      summary: Update a club
      description: ''
      operationId: updateClub
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clubForUpdate'
        required:
          true
        description: body
      responses:
        201:
          description: Newly updated club
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/club'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - clubs
    delete:
      summary: Delete a club
      description: ''
      operationId: deleteClub
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
      responses:
        204:
          description: The club is deleted
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - clubs
  '/clubs/{clubId}/logo':
    post:
      summary: Upload a club's
      description: 'Require CLUB_CREATE right'
      operationId: uploadLogo
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/logoForCreation'
            encoding:
              medicalCertificateFileName:
                contentType: image/png, image/jpeg

        required:
          true
        description: body
      responses:
        201:
          description: Created or updated club's logo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/photo'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - clubs
  '/clubs/{clubId}/affiliations':
    get:
      summary: find all club's affiliations
      description: 'Require CLUB_READ right'
      operationId: findAllClubAffiliations
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
      responses:
        200:
          description: get the club affiliation for the season
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/seasonWithAffiliation'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - affiliations
  '/clubs/{clubId}/seasons/{seasonId}/affiliations':
    post:
      summary: Create the club affiliation for a season
      description: 'Require CLUB_CREATE right'
      operationId: createAffiliation
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/affiliationForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created affiliation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/affiliation'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - affiliations
    get:
      summary: get the club affiliation for a season
      description: 'Require CLUB_READ right'
      operationId: getAffiliation
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
      responses:
        200:
          description: get the club affiliation for the season
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/affiliation'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - affiliations
    put:
      summary: Update the club affiliation for a season
      description: 'Require CLUB_UPDATE right'
      operationId: UpdateAffiliation
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/affiliationForUpdate'
        required:
          true
        description: body
      responses:
        200:
          description: updated club affiliation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/affiliation'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - affiliations
    delete:
      summary: Delete the club affiliation for a season
      description: 'Require CLUB_DELETE right'
      operationId: deleteAffiliation
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
      responses:
        204:
          description: the club affiliation is deleted
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - affiliations
  '/clubs/{clubId}/seasons/{seasonId}/teams':
    get:
      summary: find all the club's teams
      description: 'Require CLUB_READ right'
      operationId: findTeams
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
      responses:
        200:
          description: Find all the club teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - teams
    post:
      summary: Create the club team for a season
      description: 'Require CLUB_CREATE right'
      operationId: createTeam
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/teamForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - teams
  '/clubs/{clubId}/seasons/{seasonId}/teams/{teamId}':
    get:
      summary: get the club team for a season
      description: 'Require CLUB_READ right'
      operationId: getTeam
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
        - $ref: '#/components/parameters/teamId'
      responses:
        200:
          description: get the club team for the season
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - teams
    put:
      summary: Update the club team for a season
      description: 'Require CLUB_UPDATE right'
      operationId: UpdateTeam
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
        - $ref: '#/components/parameters/teamId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/teamForUpdate'
        required:
          true
        description: body
      responses:
        200:
          description: updated club team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - teams
    delete:
      summary: Delete the club team for a season
      description: 'Require CLUB_DELETE right'
      operationId: deleteTeam
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
        - $ref: '#/components/parameters/teamId'
      responses:
        204:
          description: the club team is deleted
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - teams

  '/clubs/{clubId}/seasons/{seasonId}/teams/{teamId}/members':
    get:
      summary: get team's member for a season
      description: 'Require CLUB_READ right'
      operationId: getTeamMembers
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
        - $ref: '#/components/parameters/teamId'
      responses:
        200:
          description: get the team's members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/teamMember'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - teams

  '/persons':
    get:
      summary: Find all persons
      description: 'Require PERSON_READ right'
      operationId: findPersons
      parameters:
        - $ref: '#/components/parameters/access_token'
      responses:
        200:
          description: find all persons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/person'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - persons
    post:
      summary: Create a person
      description: 'Require PERSON_CREATE right'
      operationId: createPerson
      parameters:
        - $ref: '#/components/parameters/access_token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/personForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - persons

  '/persons/{personId}':
    get:
      summary: get a person
      description: 'Require PERSON_READ right'
      operationId: getPerson
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/personId'
      responses:
        200:
          description: get back a person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - persons
    put:
      summary: Update a person
      description: 'Require PERSON_UPDATE right'
      operationId: updatePerson
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/personForUpdate'
        required:
          true
        description: body
      responses:
        201:
          description: Newly updated person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - persons
    delete:
      summary: Delete a person
      description: 'Require PERSON_DELETE right'
      operationId: deletePerson
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/personId'
      responses:
        204:
          description: The person is deleted
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - persons

  '/persons/{personId}/medicalCertificate':
    post:
      summary: Upload a person's medical certificate
      description: 'Require PERSON_CREATE right'
      operationId: uploadMedicalCertificate
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/medicalCertificateForCreation'
            encoding:
              medicalCertificateFileName:
                contentType: image/png, image/jpeg, application/pdf

        required:
          true
        description: body
      responses:
        200:
          description: Created or updated person's medical certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/medicalCertificate'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - persons

  '/persons/{personId}/photo':
    post:
      summary: Upload a person's photo
      description: 'Require PERSON_CREATE right'
      operationId: uploadPhoto
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/photoForCreation'
            encoding:
              medicalCertificateFileName:
                contentType: image/png, image/jpeg

        required:
          true
        description: body
      responses:
        201:
          description: Created or updated person's photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/photo'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - persons


  '/persons/{personId}/clubs/{clubId}/seasons/{seasonId}/licences':
    get:
      summary: get a person's licences
      description: 'Require PERSON_READ right'
      operationId: getLicences
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
      responses:
        200:
          description: get person's licences
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/licence'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - licences
    post:
      summary: Create a person's licence
      description: 'Require PERSON_CREATE right'
      operationId: createPersonLicence
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/licenceForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created person's licence
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licence'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - licences
  '/persons/{personId}/clubs/{clubId}/seasons/{seasonId}/licences/{licenceId}':
    put:
      summary: Update a person's licence
      description: 'Require PERSON_UPDATE right'
      operationId: updatePersonLicence
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
        - $ref: '#/components/parameters/licenceId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/licenceForUpdate'
        required:
          true
        description: body
      responses:
        201:
          description: Newly updated person's licence
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licence'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - licences
    delete:
      summary: Delete a person's licence
      description: 'Require PERSON_DELETE right'
      operationId: deletePersonLicence
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/seasonId'
        - $ref: '#/components/parameters/licenceId'
      responses:
        204:
          description: The person's licence is deleted
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - licences
  '/seasons':
    get:
      summary: Find all seasons
      description: 'No right Required'
      operationId: findSeasons
      parameters:
        - $ref: '#/components/parameters/access_token'
      responses:
        200:
          description: find all seasons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/season'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - configurations
    post:
      summary: Create a season
      description: 'Require SEASON_CREATE right'
      operationId: createSeason
      parameters:
        - $ref: '#/components/parameters/access_token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/seasonForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created season
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/season'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - configurations
  '/seasons/{seasonId}':
    put:
      summary: Update a season
      description: 'Require SEASON_UPDATE right'
      operationId: updateSeason
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/seasonId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/seasonForUpdate'
        required:
          true
        description: body
      responses:
        201:
          description: Newly updated season
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/season'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - configurations
    delete:
      summary: Delete a season
      description: 'Require SEASON_DELETE right'
      operationId: deleteSeason
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/seasonId'
      responses:
        204:
          description: The season is deleted
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - configurations

  '/formationTypes':
    get:
      summary: Find all formation types
      description: 'No right Required'
      operationId: findFormationTypes
      parameters:
        - $ref: '#/components/parameters/access_token'
      responses:
        200:
          description: find all formation Types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/formationType'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - configurations

  '/profileTypes':
    get:
      summary: Find all profile types
      description: 'No right Required'
      operationId: findProfileTypes
      parameters:
        - $ref: '#/components/parameters/access_token'
      responses:
        200:
          description: find all profile Types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/profileType'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - configurations

  '/licenceTypes':
    get:
      summary: Find all licence types
      description: 'No right Required'
      operationId: findLicenceTypes
      parameters:
        - $ref: '#/components/parameters/access_token'
      responses:
        200:
          description: find all licence Types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/licenceType'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      tags:
        - configurations

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  responses:
    400:
      description: All errors due to incorrect client input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ZError"

    404:
      description: Entity not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ZError"

    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ZError"

    401:
      description: Not authorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ZError"

  parameters:
    teamId:
      name: "teamId"
      schema:
        type: integer
      required: true
      in: path
      description: "Id of a team"
    clubId:
      name: "clubId"
      schema:
        type: integer
      required: true
      in: path
      description: "Id of a club"
    userId:
      name: "userId"
      schema:
        type: integer
      required: true
      in: path
      description: "Id of a user"
    personId:
      name: "personId"
      schema:
        type: integer
      required: true
      in: path
      description: "Id of a person"
    licenceId:
      name: "licenceId"
      schema:
        type: string
      required: true
      in: path
      description: "identifications of the licence"
    seasonId:
      name: "seasonId"
      schema:
        type: string
        minLength: 8
        maxLength: 8
        pattern: "^([0-9]){8}$"
      required: true
      in: path
      description: "identifications of the season"
    access_token:
      name: "access_token"
      required: true
      schema:
        type: string
      in: header
      description: "Once the user is logged, the user receive an access token and have to send it for each further requests"
    confirmToken:
      name: "confirmToken"
      schema:
        type: string
      required: true
      in: query
      description: "Token to confirm email address"
    resetToken:
      name: "resetToken"
      schema:
        type: string
      required: false
      in: query
      description: "Token to reset password"

  schemas:
    user:
      required:
        - id
        - email
        - profile
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
          format: email
          maxLength: 255
        profile:
          $ref: '#/components/schemas/profile'


    userForCreation:
      allOf:
        - $ref: '#/components/schemas/userForUpdate'
      required:
        - email
        - profile

    userForUpdate:
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        profile:
          $ref: '#/components/schemas/profileForCreation'

    profileForCreation:
      required:
        - type
        - clubIds
      properties:
        type:
          $ref: '#/components/schemas/profileTypeForCreation'
        clubIds:
          type: array
          items:
            type: integer
            format: int32
        allClubs:
          type: boolean

    profile:
      required:
        - type
        - clubIds
      properties:
        type:
          $ref: '#/components/schemas/profileType'
        clubIds:
          type: array
          items:
            type: integer
            format: int32

    profileTypeForCreation:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          maxLength: 255

    profileType:
      allOf:
        - $ref: '#/components/schemas/profileTypeForCreation'
        - properties:
            functionalities:
              type: array
              items:
                $ref: '#/components/schemas/functionality'
      required:
        - functionalities

    functionality:
      type: string
      enum:
        - USER_READ
        - USER_CREATE
        - USER_UPDATE
        - USER_DELETE
        - CLUB_READ
        - CLUB_CREATE
        - CLUB_UPDATE
        - CLUB_DELETE
        - AFFILIATION_VALIDATE
        - PERSON_READ
        - PERSON_CREATE
        - PERSON_UPDATE
        - PERSON_DELETE
        - SEASON_READ
        - SEASON_CREATE
        - SEASON_UPDATE
        - SEASON_DELETE

    formationType:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          maxLength: 255

    club:
      allOf:
        - $ref: '#/components/schemas/clubForUpdate'
        - properties:
            id:
              type: integer
              format: int32
            logo:
              $ref: '#/components/schemas/logo'
      required:
        - id
        - name
        - shortName



    clubForCreation:
      allOf:
        - $ref: '#/components/schemas/clubForUpdate'
      required:
        - name
        - shortName

    clubForUpdate:
      properties:
        name:
          type: string
          maxLength: 255
        shortName:
          type: string
          maxLength: 255

    seasonWithAffiliation:
      required:
        - season
        - affiliation
      properties:
        season:
          $ref: '#/components/schemas/season'
        affiliation:
          $ref: '#/components/schemas/affiliation'

    affiliation:
      allOf:
        - $ref: '#/components/schemas/affiliationForUpdate'
        - properties:
            id:
              type: integer
              format: int32
      required:
        - id
        - prefectureNumber
        - prefectureCity
        - siretNumber
        - address
        - postalCode
        - city
        - email
        - board
        - status


    affiliationForCreation:
      allOf:
        - $ref: '#/components/schemas/affiliationForUpdate'
        - properties:
            board:
              $ref: '#/components/schemas/boardForCreation'
      required:
        - prefectureNumber
        - prefectureCity
        - siretNumber
        - address
        - postalCode
        - city
        - email
        - board


    affiliationForUpdate:
      properties:
        prefectureNumber:
          type: string
          maxLength: 255
        prefectureCity:
          type: string
          maxLength: 255
        siretNumber:
          type: string
          maxLength: 255
        address:
          type: string
          maxLength: 255
        postalCode:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        phoneNumber:
          type: string
          pattern: ^((\+)33|0)[1-9](\d{2}){4}$
        email:
          type: string
          format: email
          maxLength: 255
        webSite:
          type: string
          maxLength: 255
        board:
          $ref: '#/components/schemas/board'
        status:
          $ref: '#/components/schemas/affiliationStatus'
        comment:
          type: string
          maxLength: 5000

    teamForCreation:
      allOf:
        - $ref: '#/components/schemas/teamForUpdate'
      required:
        - name

    teamForUpdate:
      properties:
        name:
          type: string
          maxLength: 255
        members:
          type: array
          items:
            $ref: '#/components/schemas/teamMemberForCreation'

    team:
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string

    teamMemberForCreation:
      required:
        - id
        - type
      properties:
        id:
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/memberType'

    teamMember:
      properties:
        member:
          $ref: '#/components/schemas/person'
        type:
          $ref: '#/components/schemas/memberType'

    memberType:
      type: string
      enum:
        - PLAYER
        - COACH
        - ASSISTANT


    boardForCreation:
      allOf:
        - $ref: '#/components/schemas/board'

    board:
      required:
        - president
        - secretary
        - treasurer
        - membersNumber
        - electedDate
      properties:
        president:
          $ref: '#/components/schemas/boardMember'
        secretary:
          $ref: '#/components/schemas/boardMember'
        treasurer:
          $ref: '#/components/schemas/boardMember'
        membersNumber:
          type: integer
        electedDate:
          type: string
          format: date

    boardMember:
      required:
        - name
        - sex
      properties:
        name:
          type: string
          maxLength: 255
        sex:
          $ref: '#/components/schemas/sex'

    sex:
      type: string
      enum:
        - MALE
        - FEMALE

    affiliationStatus:
      description: 'Once an affiliation is created, if the status is not provided then it''s initialized with TO_COMPLETE.
                    Then available transitions are : 
                    - TO_COMPLETE ==> SUBMITTED
                    - SUBMITTED ==> VALIDATED
                    - SUBMITTED ==> TO_COMPLETE'
      type: string
      enum:
        - TO_COMPLETE
        - SUBMITTED
        - VALIDATED

    reset:
      required:
        - login
      properties:
        login:
          type: string
          maxLength: 255

    credentials:
      required:
        - login
        - password
      properties:
        login:
          type: string
          minLength: 1
          maxLength: 255
        password:
          type: string
          format: password
          minLength: 1
          maxLength: 255

    session:
      required:
        - access_token
        - user
      properties:
        access_token:
          type: string
          maxLength: 255
        user:
          $ref: '#/components/schemas/user'

    updatePassword:
      required:
        - oldPassword
        - newPassword
      properties:
        oldPassword:
          type: string
          format: password
          minLength: 1
          maxLength: 255
        newPassword:
          type: string
          format: password
          minLength: 1
          maxLength: 255

    confirmPassword:
      required:
        - newPassword
      properties:
        newPassword:
          type: string
          format: password
          minLength: 1
          maxLength: 255

    person:
      allOf:
        - $ref: '#/components/schemas/personForCreation'
        - properties:
            id:
              type: integer
              format: int32
            photo:
              $ref: "#/components/schemas/photo"
            medicalCertificate:
              $ref: "#/components/schemas/medicalCertificate"
      required:
        - id

    personForCreation:
      allOf:
        - $ref: '#/components/schemas/personForUpdate'
      required:
        - firstName
        - name
        - email


    personForUpdate:
      properties:
        firstName:
          type: string
          maxLength: 255
        name:
          type: string
          maxLength: 255
        sex:
          $ref: '#/components/schemas/sex'
        birthDate:
          type: string
          format: date
        address:
          type: string
          maxLength: 255
        postalCode:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        phoneNumber:
          type: string
          pattern: ^((\+)33|0)[1-9](\d{2}){4}$
        email:
          type: string
          format: email
        nationality:
          type: string
          maxLength: 255
        formations:
          type: array
          items:
            $ref: "#/components/schemas/formation"

    season:
      allOf:
        - $ref: '#/components/schemas/seasonForCreation'
        - properties:
            id:
              type: string
              pattern: ^([0-9]){8}$
      required:
        - id
        - description
        - begin
        - end

      example:
        id: "20172018"
        description: 'Season 2017/2018'
        begin: '2017-09-01'
        end: '2018-08-31'

    seasonForCreation:
      allOf:
        - $ref: '#/components/schemas/seasonForUpdate'
      required:
        - description
        - begin
        - end

    seasonForUpdate:
      properties:
        description:
          type: string
          maxLength: 255
        begin:
          type: string
          format: date
        end:
          type: string
          format: date

    medicalCertificateForCreation:
      type: object
      required:
        - medicalCertificateFileName
        - medicalCertificateBeginValidityDate
      properties:
        medicalCertificateFileName:
          type: string
          format: binary
        medicalCertificateBeginValidityDate:
          type: string
          pattern: ^(19|20)\\d\\d([-])(0[1-9]|1[012])\\2(0[1-9]|[12][0-9]|3[01])$
          description: "Format is YYYY-MM-DD. <br> There is a bug in some client so the date is sent as string without format:date"

    photoForCreation:
      type: object
      required:
        - photoFileName
      properties:
        photoFileName:
          type: string
          format: binary

    logoForCreation:
      type: object
      required:
        - logoFileName
      properties:
        logoFileName:
          type: string
          format: binary

    logo:
      required:
        - location
      properties:
        location:
          type: string

    photo:
      required:
        - location
      properties:
        location:
          type: string

    medicalCertificate:
      required:
        - location
        - beginValidityDate
      properties:
        location:
          type: string
        beginValidityDate:
          type: string
          format: date



    formation:
      required:
        - id
        - name
        - date
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          maxLength: 255
        date:
          type: string
          format: date
      example:
        id: 1
        name: 'Arbitre Niveau 1'
        date: '2010-02-01'

    licenceType:
      required:
        - id
        - name
        - medicalCertificateRequired
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        medicalCertificateRequired:
          type: boolean
      example:
        name: 'Sénior Compétition'
        medicalCertificateRequired: true



    licence:
      required:
        - number
        - typeLicences
        - season
        - clubId
      properties:
        number:
          type: string
        typeLicences:
          type: array
          items:
            $ref: "#/components/schemas/licenceType"
        season:
          type: string
        formationNeed:
          type: array
          items:
            $ref: "#/components/schemas/formationType"
        clubId:
          type: integer
          format: int32

    licenceForCreation:
      allOf:
        - $ref: '#/components/schemas/licenceForUpdate'
      required:
        - typeLicences

    licenceForUpdate:
      properties:
        typeLicences:
          description: ids of licence types
          type: array
          items:
            type: integer
            format: int32
        formationNeed:
          description: ids of formation types needed
          type: array
          items:
            type: integer
            format: int32

    ZError:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      example:
        - description: 400/1
          code: 1
          message: "The body field %s is missing"
        - description: 400/2
          code: 2
          message: "The body field value %s is invalid : %s"
        - description: 400/3
          code: 3
          message: "The field value %s is invalid"
        - description: 400/4
          code: 4
          message: "The header %s is missing"
        - description: 400/5
          code: 5
          message: "The header value %s is invalid  : %s"
        - description: 400/6
          code: 6
          message: "The query string %s is missing"
        - description: 400/7
          code: 7
          message: "The query string value %s is invalid : %s"
        - description: 400/8
          code: 8
          message: "The body is invalid"
        - description: 400/9
          code: 9
          message: "Body Field format error"
        - description: 400/10
          code: 10
          message: "Wrong login/password"
        - description: 400/11
          code: 11
          message: "Wrong old Password"
        - description: 400/12
          code: 12
          message: "New and old passwords cannot be the same"
        - description: 400/13
          code: 13
          message: "The season %s Already Exists"
        - description: 400/14
          code: 14
          message: "This file (%s) extension is not supported"
        - description: 400/15
          code: 15
          message: "This content type (%s) is not Authorized"
        - description: 401/1
          code: 1
          message: "Unauthorized"
        - description: 404/0
          code: 0
          message: "Service not found"
        - description: 404/1
          code: 1
          message: "Club (Id %s) not found"
        - description: 404/2
          code: 2
          message: "Affiliation (clubId %s, season %s) not found"
        - description: 404/3
          code: 3
          message: "User (%s) not found"
        - description: 404/4
          code: 4
          message: "Confirm token not found"
        - description: 404/5
          code: 5
          message: "Confirm token is no longer available"
        - description: 404/6
          code: 6
          message: "Person (%s) not found"
        - description: 404/7
          code: 7
          message: "Season (%s) not found"
        - description: 404/8
          code: 8
          message: "Licence (%s) not found"
        - description: 405/0
          code: 0
          message: "Method Not Allowed"
        - description: 500/1
          code: 1
          message: "Internal Error : %s"
        - description: 500/2
          code: 2
          message: "Error loading technical configuration : %s"
        - description: 500/3
          code: 3
          message: "Error with emailing"
        - description: 500/4
          code: 4
          message: "Database Error"
        - description: 500/5
          code: 5
          message: "Json Parse Error"