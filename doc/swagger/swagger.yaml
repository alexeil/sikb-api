openapi: 3.0.0
info:
  title: SIKB-API
  description: |+

  contact:
    name: Fédération Kin-ball France
    url: 'http://kin-ball.fr'
    email: fkbf@kin-ball.fr
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
  version: v1

servers:
  - url: http://ec2-35-180-42-251.eu-west-3.compute.amazonaws.com:8080/sikb/api/v1
    description: AWS URL
  - url: https://sikb-api.herokuapp.com/api/v1
    description: Heroku URL
  - url: http://localhost:8080/sikb/api/v1
    description: Local URL

security:
  - basicAuth: []

tags:
  - name: users
    description: accounts to log into the system
  - name: identification
    description: APIs related to user connection
  - name: clubs
    description: APIs to Clubs management
  - name: affiliations
    description: APIs to affiliations management
  - name: persons
    description: APIs to persons management (a Person can be a Player, Referee etc.)

paths:
  '/users':
    get:
      summary: Find all users
      description: ''
      operationId: findUsers
      parameters:
        - $ref: '#/components/parameters/access_token'
      responses:
        200:
          description: find all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - users
    post:
      summary: Create a user
      description: ''
      operationId: createUser
      parameters:
        - $ref: '#/components/parameters/access_token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - users
  '/users/login':
    post:
      summary: Log in a user
      description: ''
      operationId: userLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentials'
        required:
          true
        description: body
      responses:
        201:
          description: a new access token is created. This token will be send in every further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - identification
  '/users/logout':
    get:
      summary: Log out a user (Revoke access Token)
      description: ''
      operationId: userLogout
      parameters:
        - $ref: '#/components/parameters/access_token'
      responses:
        204:
          description: Access token is revoked and user logged out
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - identification
  '/users/reset':
    post:
      summary: Ask to reset a password
      description: ''
      operationId: userReset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reset'
        required:
          true
        description: body
      responses:
        204:
          description: A mail will be send allowing user to reset his password
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - identification
  '/users/updatePassword':
    post:
      summary: Update the user password
      description: 'You can update either being log (access token is required) or unlog but you will need the resetToken in the mail sent by the reset password API'
      operationId: userUpdatePassword
      parameters:
        - name: "access_token"
          required: false
          schema:
            type: string
          in: header
          description: "Once the user is logged, the user receive an access token and have to send it for each further requests"
        - $ref: '#/components/parameters/resetToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePassword'
        required:
          true
        description: body
      responses:
        204:
          description: The password was updated
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - identification
  '/users/confirm':
    post:
      summary: Confirm user email
      description: 'A mail was sent to the user email address with a link to confirm his email and set his password'
      operationId: userConfirm
      parameters:
        - $ref: '#/components/parameters/confirmToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePassword'
        required:
          true
        description: body
      responses:
        204:
          description: A mail was sent allowing to reset the password
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - identification
  '/users/{userId}':
    get:
      summary: get a user
      description: ''
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          description: get back a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - users
    put:
      summary: Update a user
      description: ''
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userForUpdate'
        required:
          true
        description: body
      responses:
        201:
          description: Newly updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - users
    delete:
      summary: Delete a user
      description: ''
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/userId'
      responses:
        204:
          description: The user is deleted
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - users
  '/clubs':
    get:
      summary: Find all club
      description: ''
      operationId: findClubs
      parameters:
        - $ref: '#/components/parameters/access_token'
      responses:
        200:
          description: find all clubs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/club'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - clubs
    post:
      summary: Create a club
      description: ''
      operationId: createClub
      parameters:
        - $ref: '#/components/parameters/access_token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clubForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created club
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/club'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - clubs
  '/clubs/{clubId}':
    get:
      summary: get a club
      description: ''
      operationId: getClubById
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
      responses:
        200:
          description: get back a club
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/club'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - clubs
    put:
      summary: Update a club
      description: ''
      operationId: updateClub
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clubForUpdate'
        required:
          true
        description: body
      responses:
        201:
          description: Newly updated club
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/club'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - clubs
    delete:
      summary: Delete a club
      description: ''
      operationId: deleteClub
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
      responses:
        204:
          description: The club is deleted
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - clubs
  '/clubs/{clubId}/{season}/affiliations':
    post:
      summary: Create the club affiliation for a season
      description: ''
      operationId: createAffiliation
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/season'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/affiliationForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created affiliation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/affiliation'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - affiliations
    get:
      summary: get the club affiliation for a season
      description: ''
      operationId: getAffiliation
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/season'
      responses:
        200:
          description: get the club affiliation for the season
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/affiliation'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - affiliations
    put:
      summary: Update the club affiliation for a season
      description: ''
      operationId: UpdateAffiliation
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/season'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/affiliationForUpdate'
        required:
          true
        description: body
      responses:
        200:
          description: updated club affiliation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/affiliation'
        '401':
          description: unauthorized
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - affiliations
    delete:
      summary: Delete the club affiliation for a season
      description: ''
      operationId: deleteAffiliation
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/season'
      responses:
        204:
          description: the club affiliation is deleted
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - affiliations

  '/persons':
    get:
      summary: Find all persons
      description: ''
      operationId: findPersons
      parameters:
        - $ref: '#/components/parameters/access_token'
      responses:
        200:
          description: find all persons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/person'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - persons
    post:
      summary: Create a person
      description: ''
      operationId: createPerson
      parameters:
        - $ref: '#/components/parameters/access_token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/personForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - persons

  '/persons/{personId}':
    get:
      summary: get a person
      description: ''
      operationId: getPerson
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/personId'
      responses:
        200:
          description: get back a person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - persons
    put:
      summary: Update a person
      description: ''
      operationId: updatePerson
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/personForUpdate'
        required:
          true
        description: body
      responses:
        201:
          description: Newly updated person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - persons
    delete:
      summary: Delete a person
      description: ''
      operationId: deletePerson
      parameters:
        - $ref: '#/components/parameters/access_token'
        - $ref: '#/components/parameters/personId'
      responses:
        204:
          description: The person is deleted
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - persons

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  parameters:
    clubId:
      name: "clubId"
      schema:
        type: integer
      required: true
      in: path
      description: "Id of a club"
    userId:
      name: "userId"
      schema:
        type: integer
      required: true
      in: path
      description: "Id of a user"
    personId:
      name: "personId"
      schema:
        type: integer
      required: true
      in: path
      description: "Id of a person"
    season:
      name: "season"
      schema:
        type: string
        minLength: 8
        maxLength: 8
        pattern: "^([0-9]){8}$"
      required: true
      in: path
      description: "Name of the season"
    access_token:
      name: "access_token"
      required: true
      schema:
        type: string
      in: header
      description: "Once the user is logged, the user receive an access token and have to send it for each further requests"
    confirmToken:
      name: "confirmToken"
      schema:
        type: string
      required: true
      in: query
      description: "Token to confirm email address"
    resetToken:
      name: "resetToken"
      schema:
        type: string
      required: false
      in: query
      description: "Token to reset password"
  schemas:
    user:
      required:
        - id
        - email
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
    userForCreation:
      required:
        - email
      properties:
        email:
          type: string
    userForUpdate:
      properties:
        email:
          type: string

    club:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        shortName:
          type: string
        logo:
          type: string
        affiliations:
          type: array
          items:
            $ref: "#/components/schemas/affiliation"

    clubForCreation:
      required:
        - name
      properties:
        name:
          type: string
        shortName:
          type: string
        logo:
          type: string
    clubForUpdate:
      properties:
        name:
          type: string
        shortName:
          type: string
        logo:
          type: string

    affiliation:
      required:
        - id
        - associationName
      properties:
        id:
          type: integer
          format: int32
        prefectureNumber:
          type: string
        prefectureCity:
          type: string
        siretNumber:
          type: string
        address:
          type: string
        postalCode:
          type: string
        city:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        webSite:
          type: string
        creationDateTime:
          type: string
          format: date-time
        modificationDateTime:
          type: string
          format: date-time
        board:
          $ref: '#/components/schemas/board'

    affiliationForCreation:
      properties:
        prefectureNumber:
          type: string
        prefectureCity:
          type: string
        siretNumber:
          type: string
        address:
          type: string
        postalCode:
          type: string
        city:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        webSite:
          type: string
        board:
          $ref: '#/components/schemas/board'

    affiliationForUpdate:
      allOf:
        - $ref: '#/components/schemas/affiliationForCreation'

    board:
      properties:
        president:
          type: string
        presidentSex:
          $ref: '#/components/schemas/sex'
        secretary:
          type: string
        secretarySex:
          $ref: '#/components/schemas/sex'
        treasurer:
          type: string
        treasurerSex:
          $ref: '#/components/schemas/sex'
        membersNumber:
          type: integer
        electedDate:
          type: string
          format: date

    sex:
      type: string
      enum:
        - MALE
        - FEMALE

    reset:
      required:
        - login
      properties:
        login:
          type: string

    credentials:
      required:
        - login
        - password
      properties:
        login:
          type: string
          minLength: 1
        password:
          type: string
          format: password
          minLength: 1

    session:
      required:
        - access_token
      properties:
        access_token:
          type: string

    updatePassword:
      required:
        - oldPassword
        - newPassword
      properties:
        oldPassword:
          type: string
          format: password
          minLength: 1
        newPassword:
          type: string
          format: password
          minLength: 1

    person:
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        name:
          type: string
        sex:
          $ref: '#/components/schemas/sex'
        birthDate:
          type: string
          format: date
        address:
          type: string
        postalCode:
          type: string
        city:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        nationality:
          type: string
        creationDateTime:
          type: string
          format: date-time
        modificationDateTime:
          type: string
          format: date-time
        formations:
          type: array
          items:
            $ref: "#/components/schemas/formation"
        licences:
          type: array
          items:
            $ref: "#/components/schemas/licence"

    personForCreation:
      required:
        - firstName
        - name
        - sex
        - email
      properties:
        firstName:
          type: string
        name:
          type: string
        sex:
          $ref: '#/components/schemas/sex'
        birthDate:
          type: string
          format: date
        address:
          type: string
        postalCode:
          type: string
        city:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        nationality:
          type: string
        creationDateTime:
          type: string
          format: date-time
        modificationDateTime:
          type: string
          format: date-time
        formations:
          type: array
          items:
            $ref: "#/components/schemas/formation"

    personForUpdate:
      properties:
        firstName:
          type: string
        name:
          type: string
        sex:
          $ref: '#/components/schemas/sex'
        birthDate:
          type: string
          format: date
        address:
          type: string
        postalCode:
          type: string
        city:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        nationality:
          type: string
        creationDateTime:
          type: string
          format: date-time
        modificationDateTime:
          type: string
          format: date-time
        formations:
          type: array
          items:
            $ref: "#/components/schemas/formation"

    formation:
      properties:
        name:
          type: string
        date:
          type: string
          format: date
      example:
        - name: 'Arbitre Niveau 1'
          date: '2010-02-01'
        - name: 'Arbitre Niveau 2'
          date: '2012-02-01'
        - name: 'Arbitre Niveau 3'
          date: '2013-02-01'
        - name: 'Formateur Arbitre Niveau 1'
          date: '2014-02-01'
        - name: 'Formateur Arbitre Niveau 1'
          date: '2016-02-01'
        - name: 'Formateur Arbitre Niveau 1'
          date: '2019-02-01'

    typeLicence:
      properties:
        name:
          type: string
        medicalCertificateRequired:
          type: boolean
      example:
        - name: 'Sénior Compétition'
          medicalCertificateRequired: true
        - name: 'Sénior Loisir'
          medicalCertificateRequired: true
        - name: 'Junior'
          medicalCertificateRequired: true
        - name: 'Entraineur/Coach'
          medicalCertificateRequired: false
        - name: 'Arbitre'
          medicalCertificateRequired: true
        - name: 'Dirigeant'
          medicalCertificateRequired: false


    licence:
      properties:
        typeLicences:
          type: array
          items:
            $ref: "#/components/schemas/typeLicence"
        season:
          type: string
        medicalCertificate:
          type: string
        formationNeed:
          type: array
          items:
            type: string
        club:
          $ref: "#/components/schemas/club"

    ZError:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      example:
        - description: 400/1
          code: 1
          message: "The body field %s is absent"
        - description: 400/2
          code: 2
          message: "The body field value %s is invalid : %s"
        - description: 400/3
          code: 3
          message: "The field value %s is invalid"
        - description: 400/4
          code: 4
          message: "The header %s is missing"
        - description: 400/5
          code: 5
          message: "The header value %s is invalid  : %s"
        - description: 400/6
          code: 6
          message: "The query string %s is absent"
        - description: 400/7
          code: 7
          message: "The query string value %s is invalid : %s"
        - description: 400/8
          code: 8
          message: "The body is invalid"
        - description: 400/9
          code: 9
          message: "Body Field format error"
        - description: 400/10
          code: 10
          message: "Wrong login/password"
        - description: 401/1
          code: 1
          message: "Unauthorized"
        - description: 404/0
          code: 0
          message: "Service not found"
        - description: 404/1
          code: 1
          message: "Club (Id %s) not found"
        - description: 404/2
          code: 2
          message: "Affiliation (clubId %s, season %s) not found"
        - description: 404/3
          code: 3
          message: "User (id %s) not found"
        - description: 404/4
          code: 4
          message: "Confirm token not found"
        - description: 404/5
          code: 5
          message: "Confirm token is no longer available"
        - description: 405/0
          code: 0
          message: "Method Not Allowed"
        - description: 500/1
          code: 1
          message: "Internal Error : %s"