openapi: 3.0.0
info:
  title: SIKB-API
  description: |+

  contact:
    name: Fédération Kin-ball France
    url: 'http://kin-ball.fr'
    email: fkbf@kin-ball.fr
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
  version: v1

servers:
  - url: https://sikb-api.herokuapp.com/api/v1
    description: Production URL
  - url: http://localhost:8080/sikb/api/v1
    description: Local URL

security:
  - basicAuth: []

paths:
  '/users':
    get:
      summary: Find all users
      description: ''
      operationId: findUsers
      responses:
        200:
          description: find all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - users
    post:
      summary: Create a user
      description: ''
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - users
  '/users/{userId}':
    get:
      summary: get a user
      description: ''
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          description: get back a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - users
    put:
      summary: Update a user
      description: ''
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userForUpdate'
        required:
          true
        description: body
      responses:
        201:
          description: Newly updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - users
    delete:
      summary: Delete a user
      description: ''
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        204:
          description: The user is deleted
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - users
  '/clubs':
    get:
      summary: Find all club
      description: ''
      operationId: findClubs
      responses:
        200:
          description: find all clubs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/club'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - clubs
    post:
      summary: Create a club
      description: ''
      operationId: createClub
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clubForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created club
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/club'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - clubs
  '/clubs/{clubId}':
    get:
      summary: get a club
      description: ''
      operationId: getClubById
      parameters:
        - $ref: '#/components/parameters/clubId'
      responses:
        200:
          description: get back a club
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/club'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - clubs
    put:
      summary: Update a club
      description: ''
      operationId: updateClub
      parameters:
        - $ref: '#/components/parameters/clubId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clubForUpdate'
        required:
          true
        description: body
      responses:
        201:
          description: Newly updated club
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/club'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - clubs
    delete:
      summary: Delete a club
      description: ''
      operationId: deleteClub
      parameters:
        - $ref: '#/components/parameters/clubId'
      responses:
        204:
          description: The club is deleted
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - clubs
  '/clubs/{clubId}/{season}/affiliations':
    post:
      summary: Create the club affiliation for a season
      description: ''
      operationId: createAffiliation
      parameters:
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/season'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/affiliationForCreation'
        required:
          true
        description: body
      responses:
        201:
          description: Newly created affiliation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/affiliation'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - affiliations
    get:
      summary: get the club affiliation for a season
      description: ''
      operationId: getAffiliation
      parameters:
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/season'
      responses:
        200:
          description: get the club affiliation for the season
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/affiliation'
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - affiliations
    put:
      summary: Update the club affiliation for a season
      description: ''
      operationId: UpdateAffiliation
      parameters:
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/season'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/affiliationForUpdate'
        required:
          true
        description: body
      responses:
        200:
          description: updated club affiliation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/affiliation'
        '401':
          description: unauthorized
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - affiliations
    delete:
      summary: Delete the club affiliation for a season
      description: ''
      operationId: deleteAffiliation
      parameters:
        - $ref: '#/components/parameters/clubId'
        - $ref: '#/components/parameters/season'
      responses:
        204:
          description: the club affiliation is deleted
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZError"
      tags:
        - affiliations

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  parameters:
    clubId:
      name: "clubId"
      schema:
        type: integer
      required: true
      in: path
      description: "Id of a club"
    userId:
      name: "userId"
      schema:
        type: integer
      required: true
      in: path
      description: "Id of a user"
    season:
      name: "season"
      schema:
        type: string
        minLength: 8
        maxLength: 8
        pattern: "^([0-9]){8}$"
      required: true
      in: path
      description: "Name of the season"

  schemas:
    user:
      required:
        - id
        - email
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
    userForCreation:
      required:
        - email
      properties:
        email:
          type: string
    userForUpdate:
      properties:
        email:
          type: string

    club:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        shortName:
          type: string
        logo:
          type: string
        affiliations:
          type: array
          items:
            $ref: "#/components/schemas/affiliation"

    clubForCreation:
      required:
        - name
      properties:
        name:
          type: string
        shortName:
          type: string
        logo:
          type: string
    clubForUpdate:
      properties:
        name:
          type: string
        shortName:
          type: string
        logo:
          type: string

    affiliation:
      required:
        - id
        - associationName
      properties:
        id:
          type: integer
          format: int32
        prefectureNumber:
          type: string
        prefectureCity:
          type: string
        siretNumber:
          type: string
        address:
          type: string
        postalCode:
          type: string
        city:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        webSite:
          type: string
        creationDateTime:
          type: string
          format: date-time
        modificationDateTime:
          type: string
          format: date-time
        board:
          $ref: '#/components/schemas/board'

    affiliationForCreation:
      properties:
        prefectureNumber:
          type: string
        prefectureCity:
          type: string
        siretNumber:
          type: string
        address:
          type: string
        postalCode:
          type: string
        city:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        webSite:
          type: string
        board:
          $ref: '#/components/schemas/board'

    affiliationForUpdate:
      allOf:
        - $ref: '#/components/schemas/affiliationForCreation'

    board:
      properties:
        president:
          type: string
        presidentSex:
          $ref: '#/components/schemas/sex'
        secretary:
          type: string
        secretarySex:
          $ref: '#/components/schemas/sex'
        treasurer:
          type: string
        treasurerSex:
          $ref: '#/components/schemas/sex'
        membersNumber:
          type: integer
        electedDate:
          type: string
          format: date

    sex:
      type: string
      enum:
        - MALE
        - FEMALE
    ZError:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string